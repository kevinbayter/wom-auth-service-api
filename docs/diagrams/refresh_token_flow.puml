@startuml Refresh_Token_Flow
!theme plain
skinparam backgroundColor #FEFEFE
skinparam sequenceMessageAlign center

title Flujo de Refresh Token - Renovación Automática

actor "Usuario" as user
participant "Angular\nClient" as client
participant "Auth\nController" as controller
participant "Token\nService" as tokenService
participant "JWT\nService" as jwtService
participant "User\nService" as userService
database "PostgreSQL" as db
database "Redis" as redis

user -> client : Realiza acción\n(access token expirado)
activate client

client -> controller : GET /auth/me
activate controller
controller --> client : 401 Unauthorized\n"JWT expired"
deactivate controller

client -> client : Detectar token expirado

client -> controller : POST /auth/refresh\n{refreshToken}
activate controller

controller -> tokenService : refreshAccessToken(refreshToken)
activate tokenService

tokenService -> jwtService : validateRefreshToken(token)
activate jwtService
jwtService -> jwtService : Verificar firma\ny expiración
jwtService --> tokenService : Token válido + userId
deactivate jwtService

tokenService -> db : SELECT * FROM refresh_tokens\nWHERE token_hash = ?
db --> tokenService : RefreshToken entity

alt Token válido y no revocado
    tokenService -> tokenService : Verificar no revocado\ny no expirado
    
    tokenService -> userService : findById(userId)
    activate userService
    userService -> db : SELECT * FROM users WHERE id = ?
    db --> userService : User data
    deactivate userService
    
    ' Rotación de refresh token
    tokenService -> db : UPDATE refresh_tokens\nSET revoked_at = NOW(),\nreplaced_by = ?
    
    tokenService -> jwtService : generateAccessToken(user)
    activate jwtService
    jwtService --> tokenService : nuevo accessToken
    deactivate jwtService
    
    tokenService -> jwtService : generateRefreshToken(user)
    activate jwtService
    jwtService --> tokenService : nuevo refreshToken
    deactivate jwtService
    
    tokenService -> db : INSERT INTO refresh_tokens\n(nuevo token)
    db --> tokenService : Token guardado
    
    tokenService --> controller : RefreshResponse\n{accessToken, refreshToken}
    deactivate tokenService
    
    controller --> client : 200 OK\n{accessToken, refreshToken, expiresIn}
    deactivate controller
    
    client -> client : Actualizar tokens\nen localStorage/Cookie
    
    client -> controller : GET /auth/me\n(reintentar con nuevo token)
    activate controller
    controller --> client : 200 OK\n{user profile}
    deactivate controller
    
    client --> user : Acción completada
    
else Token inválido o revocado
    tokenService --> controller : InvalidRefreshTokenException
    controller --> client : 401 Unauthorized\n"Invalid refresh token"
    
    client -> client : Limpiar tokens
    client -> client : Redirigir a /login
    client --> user : Sesión expirada
end

deactivate client

note right of tokenService
    Rotación de Tokens:
    1. Token antiguo se marca como "revoked"
    2. Se crea nuevo refresh token
    3. Token antiguo ya no puede usarse
    4. Previene replay attacks
end note

@enduml
